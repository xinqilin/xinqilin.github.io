<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tree on Bill.Lin&#39;s Notes</title>
    <link>https://xinqilin.github.io/tags/tree/</link>
    <description>Recent content in Tree on Bill.Lin&#39;s Notes</description>
    <generator>Hugo</generator>
    <language>zh-tw</language>
    <lastBuildDate>Sun, 21 Nov 2021 20:11:03 +0800</lastBuildDate>
    <atom:link href="https://xinqilin.github.io/tags/tree/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>二元樹遍歷（Binary Tree Traversal）完整指南</title>
      <link>https://xinqilin.github.io/post/algorithm/treetraversal/</link>
      <pubDate>Sun, 21 Nov 2021 20:11:03 +0800</pubDate>
      <guid>https://xinqilin.github.io/post/algorithm/treetraversal/</guid>
      <description>&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;&#xA;&lt;p&gt;二元樹遍歷是資料結構與演算法中的基本概念，主要有三種遍歷方式：&lt;strong&gt;前序遍歷（PreOrder）&lt;/strong&gt;、&lt;strong&gt;中序遍歷（InOrder）&lt;/strong&gt;、&lt;strong&gt;後序遍歷（PostOrder）&lt;/strong&gt;。每種遍歷方式都有其特定的應用場景和優勢。&lt;/p&gt;&#xA;&lt;h2 id=&#34;基本概念&#34;&gt;基本概念&lt;/h2&gt;&#xA;&lt;p&gt;考慮以下二元樹結構：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        4&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;       / \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      2   6&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;     / \ / \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    1  3 5  7&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;三種遍歷方式的順序&#34;&gt;三種遍歷方式的順序&lt;/h3&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;前序遍歷（PreOrder）&lt;/strong&gt;：中 → 左 → 右&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;遍歷順序：4 → 2 → 1 → 3 → 6 → 5 → 7&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;中序遍歷（InOrder）&lt;/strong&gt;：左 → 中 → 右&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;遍歷順序：1 → 2 → 3 → 4 → 5 → 6 → 7&lt;/li&gt;&#xA;&lt;li&gt;對於&lt;strong&gt;二元搜尋樹&lt;/strong&gt;，中序遍歷可得到&lt;strong&gt;有序序列&lt;/strong&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;後序遍歷（PostOrder）&lt;/strong&gt;：左 → 右 → 中&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;遍歷順序：1 → 3 → 2 → 5 → 7 → 6 → 4&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;遍歷實作&#34;&gt;遍歷實作&lt;/h2&gt;&#xA;&lt;h3 id=&#34;1-中序遍歷inorder-traversal&#34;&gt;1. 中序遍歷（InOrder Traversal）&lt;/h3&gt;&#xA;&lt;p&gt;中序遍歷在二元搜尋樹中特別有用，因為它會按&lt;strong&gt;升序&lt;/strong&gt;訪問所有節點。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
